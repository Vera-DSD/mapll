import streamlit as st
import joblib
import numpy as np
import warnings
import logging
import pandas as pd

warnings.filterwarnings('ignore')

logging.getLogger('streamlit').setLevel(logging.ERROR)
logging.getLogger('streamlit.runtime.scriptrunner').setLevel(logging.ERROR)

@st.cache_resource
def load_model():
    model = joblib.load('best_model.pkl')
    return model

model = load_model()

def preprocess_input(age, sex, chest_pain, resting_bp, cholesterol,
                     fasting_bs, resting_ecg, max_hr, exercise_angina,
                     oldpeak, st_slope):
    
    processed_sex = {'Male': 1, 'Female': 0}[sex]
    processed_chest_pain = {'Typical Angina': 0, 'Atypical Angina': 1, 'Non-Anginal Pain': 2, 'Asymptomatic': 3}[chest_pain]
    processed_resting_ecg = {'Normal': 0, 'ST-T Wave Abnormality': 1, 'Left Ventricular Hypertrophy': 2}[resting_ecg]
    processed_exercise_angina = {'Yes': 1, 'No': 0}[exercise_angina]
    processed_st_slope = {'Up': 0, 'Flat': 1, 'Down': 2}[st_slope]
    processed_fasting_bs = 1 if fasting_bs == 'Yes' else 0
    
   
    input_data = pd.DataFrame({
        'Age': [age],
        'Sex': [processed_sex],
        'ChestPainType': [processed_chest_pain],
        'RestingBP': [resting_bp],
        'Cholesterol': [cholesterol],
        'FastingBS': [processed_fasting_bs],
        'RestingECG': [processed_resting_ecg],
        'MaxHR': [max_hr],
        'ExerciseAngina': [processed_exercise_angina],
        'Oldpeak': [oldpeak],
        'ST_Slope': [processed_st_slope]
    })
    
    return input_data
    
   
    processed_fasting_bs = 1 if fasting_bs == 'Yes' else 0
    
    input_array = np.array([age, processed_sex, processed_chest_pain, resting_bp, cholesterol,
                           processed_fasting_bs, processed_resting_ecg, max_hr, processed_exercise_angina,
                           float(oldpeak), processed_st_slope]).reshape(1, -1)
    return input_array

st.set_page_config(page_title="Heart Disease Predictor", page_icon="‚ù§Ô∏è", layout="wide")

st.title("‚ù§Ô∏è Heart Disease Predictor")
st.markdown("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.")

with st.form(key='patient_data'):
    st.subheader("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    
    # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=18, value=50)
        sex = st.selectbox("–ü–æ–ª", ["Male", "Female"])
        chest_pain = st.selectbox("–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏", ["Typical Angina", "Atypical Angina", "Non-Anginal Pain", "Asymptomatic"])
        resting_bp = st.slider("–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–æ—è", min_value=80, max_value=200, value=120)
        cholesterol = st.slider("–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω", min_value=100, max_value=400, value=200)
        
    with col2:
        fasting_bs = st.radio("–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –∫—Ä–æ–≤–∏ –Ω–∞—Ç–æ—â–∞–∫", ['Yes', 'No'])
        resting_ecg = st.selectbox("–≠–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–æ—è", ["Normal", "ST-T Wave Abnormality", "Left Ventricular Hypertrophy"])
        max_hr = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π", min_value=60, max_value=220, value=150)
        exercise_angina = st.radio("–ê–Ω–≥–∏–Ω–∏–Ω–∞ –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ", ['Yes', 'No'])
        oldpeak = st.number_input("–î–µ–ø—Ä–µ—Å—Å–∏—è ST —Å–µ–≥–º–µ–Ω—Ç–∞", min_value=0.0, step=0.1, format="%f")
        st_slope = st.selectbox("–ù–∞–∫–ª–æ–Ω –ø–∏–∫–æ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ ST", ["Up", "Flat", "Down"])

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–∞ 
    submitted = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∏—Å–∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è")

if submitted:
    data = preprocess_input(age, sex, chest_pain, resting_bp, cholesterol,
                            fasting_bs, resting_ecg, max_hr, exercise_angina,
                            oldpeak, st_slope)
    result = model.predict(data)
    if result[0]:
        st.error("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è ü©∫")
    else:
        st.success("–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ ‚ù§Ô∏è")



